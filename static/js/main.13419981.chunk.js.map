{"version":3,"sources":["Card.js","CardList.js","SearcBox.js","Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","fontFamily","fontSize","SearcBox","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAiBeA,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE3B,OAEQ,sBAAKC,UAAW,sDAAhB,UACC,qBAAKC,IAAG,+BAA2BF,EAA3B,iBAA+CG,IAAK,KAC5D,gCACC,mCAAML,EAAN,OACA,kCAAKC,EAAL,cCeIK,EArBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEjB,OACG,8BAGDA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAS,cAAC,EAAD,CAEVR,GAAIK,EAAOG,GAAGR,GACbF,KAAMO,EAAOG,GAAGV,KACfC,MAAOM,EAAOG,GAAGT,OAHfS,SCIIC,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,qBAAKV,UAAU,MAAf,SACM,uBACCA,UAAU,0CACVW,KAAM,QACNC,YAAa,gBACbC,SAAUH,OCCJI,EARA,SAACC,GACb,OACI,qBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAO,mBAAoBC,OAAQ,SAAnE,SACEJ,EAAMK,YCiDAC,G,wDA9Cd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IAeNO,eAAiB,SAACC,GACZ,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAfhD,EAAKC,MAAQ,CAEZvB,OAAQ,GACRK,YAAa,IALI,E,gEAQQ,IAAD,OACpBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACpB,OAAO4B,S,+BAUhC,IAAD,EACwBC,KAAKN,MAA7BvB,EADA,EACAA,OAAQK,EADR,EACQA,YACVyB,EAAiB9B,EAAO+B,QAAO,SAAAC,GAClC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS7B,EAAY4B,kBAInD,OAAQjC,EAAOmC,OAIb,sBAAKvC,UAAU,KAAf,UACC,oBAAIgB,MAAO,CAACwB,WAAW,iBAAkBC,SAAS,KAAlD,yBACA,cAACC,EAAD,CAAWhC,aAAcuB,KAAKX,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,CAAUlB,OAAQ8B,SAPtB,6C,GA9BWS,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.13419981.chunk.js","sourcesContent":["import React from 'react' ;\r\n\r\nconst Card = ({name, email, id}) => {\r\n\t\r\n\treturn (\r\n        \r\n         <div className= 'tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5 '>\r\n         \t<img src= {`https://robohash.org/${id}?size=200x200` } alt= '' />\r\n         \t<div>\r\n         \t\t<h2> {name} </h2>\r\n         \t\t<p> {email} </p>\r\n         \t</div>\r\n         </div> \r\n       \r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react' ;\r\nimport Card from './Card' ;\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\t\r\n  return (\r\n     <div>\r\n\r\n\t  {\r\n\t  \trobots.map((user, i) => {\r\n\t       return ( <Card  \r\n\t\t    key={i} \r\n\t\t     id={robots[i].id} \r\n\t\t      name={robots[i].name}\r\n\t\t       email={robots[i].email} \r\n\t\t    />\r\n\t\t   );\r\n        })\r\n\t  }\r\n\r\n\t </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react' ;\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t      <input \r\n\t\t\t      className=' f3 tc pa3 ba b--green bg-lightest-blue' \r\n\t\t\t      type= 'searc' \r\n\t\t\t      placeholder= 'search robots' \r\n\t\t\t      onChange={searchChange}\r\n\t\t      />\r\n\t    </div> \r\n\t); \r\n\t   \r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n   return (\r\n       <div style={{overflow:'scroll', border:' 5px solid black', height: '800px'}}>\r\n       \t{props.children}\r\n       </div>\r\n   )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearcBox from './SearcBox';\r\nimport Scroll from './Scroll';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t   }\r\n\t }\r\n       componentDidMount() {\r\n      \tfetch('https://jsonplaceholder.typicode.com/users')\r\n      \t.then(response => response.json())\r\n      \t.then(users=> this.setState({robots:users}));\r\n          \r\n       \r\n      }\r\n\r\n\t onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value})\r\n\t \t\r\n\t \t}\r\n\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t \t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\r\n\t \t\t})\r\n\r\n\t\t     return !robots.length ?\r\n\t\t     <h1>Lodding</h1> :\r\n\r\n                (\r\n\t\t\t      <div className='tc'>\r\n\t\t\t      \t<h1 style={{fontFamily:'El Tito Adolfo', fontSize:100,}}>RoBofriends</h1>\r\n\t\t\t      \t<SearcBox  searchChange={this.onSearchChange} />\r\n\t\t\t      \t<Scroll>\r\n\t\t\t      \t <CardList robots={filteredRobots} />\r\n\t\t\t      \t</Scroll>\r\n\t\t\t      </div>\r\n\t\t       );\r\n\t\t   }\r\n\t      \r\n\t\r\n\t\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App' ;\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons' ;\nimport '@material-ui/core';\n\n\nReactDOM.render(\n  <React.StrictMode>\n     <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}